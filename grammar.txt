expression ::= assignment_expression
    |   expression ',' assignment_expression
    ;

assignment_expression ::= conditional_expression
    |   unary_expression assignment_operator assignment_expression
    ;

conditional_expression ::= logical_or_expression
    |   logical_or_expression '?' expression ':' conditional_expression 
    ;

logical_or_expression ::= logical_and_expression
    |   logical_or_expression '||' logical_and_expression
    ;

logical_and_expression ::= inclusive_or_expression
    |   logical_and_expression '&&' inclusive_or_expression
    ;

inclusive_or_expression ::= exclusive_or_expression
    |   inclusive_or_expression '|' exclusive_or_expression
    ;

exclusive_or_expression ::= and_expression
    |   exclusive_or_expression '^' and_expression
    ;

and_expression ::= equality_expression
    |   and_expression '&' equality_expression
    ;

equality_expression ::= relational_expression
    |   equality_expression '==' relational_expression
    |   equality_expression '!=' relational_expression
    ;

relational_expression ::= shift_expression
    |   relational_expression '<' shift_expression
    |   relational_expression '>' shift_expression
    |   relational_expression '<=' shift_expression
    |   relational_expression '>=' shift_expression
    ;

shift_expression ::= additive_expression
    |   shift_expression '<<' additive_expression
    |   shift_expression '>>' additive_expression
    ;

additive_expression ::= multiplicative_expression
    |   additive_expression '+' multiplicative_expression
    |   additive_expression '-' multiplicative_expression
    ;

multiplicative_expression ::= unary_expression
    |   multiplicative_expression '*' unary_expression
    |   multiplicative_expression '/' unary_expression
    |   multiplicative_expression '%' unary_expression
    ;

unary_expression ::= postfix_expression
    |   '++' unary_expression
    |   '--' unary_expression
    |   '&'  '[' id_list ']'
    | unary_operator unary_expression 
    ;

id_list ::= ID opt_comma;

opt_comma ::= ',' id_list
    |
    ;

unary_operator ::= '-'
    |   '~'
    |   '!'
    ;
    
postfix_expression ::= primary_expression
    |   postfix_expression '(' ')'
    |   postfix_expression '(' argument_expression_list ')'
    |   postfix_expression '++'
    |   postfix_expression '--'
    ;

argument_expression_list::= assignment_expression
    |   argument_expression_list ',' assignment_expression
    ;

primary_expression ::= ID
    |   INT_LITERAL
    |   '(' expression ')'
    ;

assignment_operator ::= '='
    ;

